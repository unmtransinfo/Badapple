#!/usr/bin/env python
#############################################################################
### scaf_2inserts.py
###
### Input: scaffold file generated by hier_scaffolds with scafid and scaffold tree for each scaffold.
### Output: sql inserts to populate scaffold and scaf2scaf tables.
###
### NOTE: Only 1st-generation child scafs relevant.  Grandchildren etc. will be
### implicit in table.
###
### input columns:
###   smiles scafid scaftree
##### e.g.
###	C(N1CCOCC1)C1=CC=NC=C1	19 19:(17,20)
###	C1COCCN1	20 20
###	C1CC1C(SC1=NC=CC=N1)C1=CC=CC=N1	21 21:(17,16:(17,3),24:(17,23),3,23,22:(23,3))
###	C(SC1=NC=CC=N1)C1CC1	22 22:(23,3)
###	C1CC1	23 23
###
### Jeremy Yang
### 20 Aug 2014
#############################################################################
import sys,os,getopt,re

PROG=os.path.basename(sys.argv[0])

#############################################################################
if __name__=='__main__':

  usage='''
  %(PROG)s - hscaf scaffold output to SQL

  required:
  --i INFILE ................... input file
  --o OUTFILE .................. output SQL INSERTs
  options:
  --v .......................... verbose
  --h .......................... this help
'''%{'PROG':PROG}

  def ErrorExit(msg):
    print >>sys.stderr,msg
    sys.exit(1)

  ifile=None; ofile=None; 
  verbose=0;
  opts,pargs = getopt.getopt(sys.argv[1:],'',['h','v','vv', 'i=','o=','dbschema='])
  if not opts: ErrorExit(usage)
  for (opt,val) in opts:
    if opt=='--h': ErrorExit(usage)
    elif opt=='--i': ifile=val
    elif opt=='--o': ofile=val
    elif opt=='--dbschema': DBSCHEMA=val
    elif opt=='--v': verbose=1
    else: ErrorExit('Illegal option: %s'%val)

  fin=file(ifile)
  if not fin:
    ErrorExit('ERROR: cannot open %s'%ifile)
  fout=file(ofile,"w")
  if not fout:
    ErrorExit('ERROR: cannot open %s'%ofile)

  n_lines=0; n_inserts=0;
  n_err=0;
  while True:
    line=fin.readline()
    if not line: break
    line=line.strip()
    if not line or line[0]=='#': continue
    n_lines+=1
    fields=re.split('\s',line)
  
    try:
      scafid=int(fields[1])
    except:
      print >>sys.stderr, "Bad line (scafid): %s"%line
      continue
  
    if len(fields)<3 or not fields[2]:
      print >>sys.stderr, "Bad line (scaftree): %s"%line
      continue
  
    smi=fields[0]
    smi=re.sub(r'\\',r"'||E'\\\\'||'",smi)
    fout.write("INSERT INTO %s.scaffold (id,scafsmi,scaftree) VALUES (%d,openbabel.cansmiles('%s'),'%s');\n"%(DBSCHEMA,scafid,smi,fields[2]))
    
    ## extract 1st-gen child scafids:
    if not re.match('^\d+:\((.*)\)\s*$',fields[2]):
      continue	##childless
  
    tstr=re.sub('^\d+:\((.*)\)\s*$',r'\1',fields[2])
  
    rob=re.compile(r':\([^)]+\)')
    m=rob.search(tstr)
    while m:
      tstr=rob.sub('',tstr)
      m=rob.search(tstr)
    #print 'DEBUG: tstr=', tstr
  
    childids=[]
    for child_id in re.split(',',tstr):
      try:
        child_id=int(child_id)
      except:
        continue
      fout.write("INSERT INTO %s.scaf2scaf (parent_id,child_id) VALUES (%d,%d);\n"%(DBSCHEMA,scafid,child_id))
      n_inserts+=1
  
  fout.close()
  print >>sys.stderr, "%s: input data lines: %d"%(PROG,n_lines)
  print >>sys.stderr, "%s: output inserts: %d"%(PROG,n_inserts)
